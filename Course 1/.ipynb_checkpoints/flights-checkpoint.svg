<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 8.1.0 (0)
 -->
<!-- Title: Entity Relationship Diagram Pages: 1 -->
<svg width="369pt" height="221pt"
 viewBox="0.00 0.00 369.00 220.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 216.5)">
<title>Entity Relationship Diagram</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-216.5 365,-216.5 365,4 -4,4"/>
<text text-anchor="middle" x="180.5" y="-5.95" font-family="Times New Roman,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v0.6.0 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- __main__.Airplane -->
<g id="node1" class="node">
<title>__main__.Airplane</title>
<g id="a_node1"><a xlink:title="__main__.Airplane&#10;&#10;usage docs: https://docs.pydantic.dev/2.0/usage/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="290,-62.5 290,-84.5 361,-84.5 361,-62.5 290,-62.5"/>
<text text-anchor="start" x="300" y="-69.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">Airplane</text>
<polygon fill="none" stroke="black" points="290,-40.5 290,-62.5 341,-62.5 341,-40.5 290,-40.5"/>
<text text-anchor="start" x="298.25" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">model</text>
<polygon fill="none" stroke="black" points="341,-40.5 341,-62.5 361,-62.5 361,-40.5 341,-40.5"/>
<text text-anchor="start" x="344.25" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="290,-18.5 290,-40.5 341,-40.5 341,-18.5 290,-18.5"/>
<text text-anchor="start" x="293" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">capacity</text>
<polygon fill="none" stroke="black" points="341,-18.5 341,-40.5 361,-40.5 361,-18.5 341,-18.5"/>
<text text-anchor="start" x="343.88" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">int</text>
</a>
</g>
</g>
<!-- __main__.Airport -->
<g id="node2" class="node">
<title>__main__.Airport</title>
<g id="a_node2"><a xlink:title="__main__.Airport&#10;&#10;usage docs: https://docs.pydantic.dev/2.0/usage/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="291.5,-164.5 291.5,-186.5 359.5,-186.5 359.5,-164.5 291.5,-164.5"/>
<text text-anchor="start" x="303.38" y="-171.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">Airport</text>
<polygon fill="none" stroke="black" points="291.5,-142.5 291.5,-164.5 340.5,-164.5 340.5,-142.5 291.5,-142.5"/>
<text text-anchor="start" x="301" y="-148.2" font-family="Times New Roman,serif" font-size="14.00">name</text>
<polygon fill="none" stroke="black" points="340.5,-142.5 340.5,-164.5 359.5,-164.5 359.5,-142.5 340.5,-142.5"/>
<text text-anchor="start" x="343.25" y="-148.2" font-family="Times New Roman,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="291.5,-120.5 291.5,-142.5 340.5,-142.5 340.5,-120.5 291.5,-120.5"/>
<text text-anchor="start" x="294.25" y="-126.2" font-family="Times New Roman,serif" font-size="14.00">location</text>
<polygon fill="none" stroke="black" points="340.5,-120.5 340.5,-142.5 359.5,-142.5 359.5,-120.5 340.5,-120.5"/>
<text text-anchor="start" x="343.25" y="-126.2" font-family="Times New Roman,serif" font-size="14.00">str</text>
</a>
</g>
</g>
<!-- __main__.Flight -->
<g id="node3" class="node">
<title>__main__.Flight</title>
<g id="a_node3"><a xlink:title="__main__.Flight&#10;&#10;usage docs: https://docs.pydantic.dev/2.0/usage/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly specified during validation.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="0,-190.5 0,-212.5 182,-212.5 182,-190.5 0,-190.5"/>
<text text-anchor="start" x="73.75" y="-197.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">Flight</text>
<polygon fill="none" stroke="black" points="0,-168.5 0,-190.5 99,-190.5 99,-168.5 0,-168.5"/>
<text text-anchor="start" x="10.5" y="-174.2" font-family="Times New Roman,serif" font-size="14.00">flight_number</text>
<polygon fill="none" stroke="black" points="99,-168.5 99,-190.5 182,-190.5 182,-168.5 99,-168.5"/>
<text text-anchor="start" x="133.75" y="-174.2" font-family="Times New Roman,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="0,-146.5 0,-168.5 99,-168.5 99,-146.5 0,-146.5"/>
<text text-anchor="start" x="2.62" y="-152.2" font-family="Times New Roman,serif" font-size="14.00">departure_airport</text>
<polygon fill="none" stroke="black" points="99,-146.5 99,-168.5 182,-168.5 182,-146.5 99,-146.5"/>
<text text-anchor="start" x="120.62" y="-152.2" font-family="Times New Roman,serif" font-size="14.00">Airport</text>
<polygon fill="none" stroke="black" points="0,-124.5 0,-146.5 99,-146.5 99,-124.5 0,-124.5"/>
<text text-anchor="start" x="10.5" y="-130.2" font-family="Times New Roman,serif" font-size="14.00">arrival_airport</text>
<polygon fill="none" stroke="black" points="99,-124.5 99,-146.5 182,-146.5 182,-124.5 99,-124.5"/>
<text text-anchor="start" x="120.62" y="-130.2" font-family="Times New Roman,serif" font-size="14.00">Airport</text>
<polygon fill="none" stroke="black" points="0,-102.5 0,-124.5 99,-124.5 99,-102.5 0,-102.5"/>
<text text-anchor="start" x="27.75" y="-108.2" font-family="Times New Roman,serif" font-size="14.00">airplane</text>
<polygon fill="none" stroke="black" points="99,-102.5 99,-124.5 182,-124.5 182,-102.5 99,-102.5"/>
<text text-anchor="start" x="116.88" y="-108.2" font-family="Times New Roman,serif" font-size="14.00">Airplane</text>
<polygon fill="none" stroke="black" points="0,-80.5 0,-102.5 99,-102.5 99,-80.5 0,-80.5"/>
<text text-anchor="start" x="25.12" y="-86.2" font-family="Times New Roman,serif" font-size="14.00">airplanes</text>
<polygon fill="none" stroke="black" points="99,-80.5 99,-102.5 182,-102.5 182,-80.5 99,-80.5"/>
<text text-anchor="start" x="101.88" y="-86.2" font-family="Times New Roman,serif" font-size="14.00">List[Airplane]</text>
</a>
</g>
</g>
<!-- __main__.Flight&#45;&gt;__main__.Airplane -->
<g id="edge1" class="edge">
<title>__main__.Flight:e&#45;&gt;__main__.Airplane:w</title>
<path fill="none" stroke="black" d="M182,-113.5C231.49,-113.5 238.39,-76.11 285.05,-73.63"/>
<polyline fill="none" stroke="black" points="290,-73.5 285,-73.63"/>
</g>
<!-- __main__.Flight&#45;&gt;__main__.Airplane -->
<g id="edge2" class="edge">
<title>__main__.Flight:e&#45;&gt;__main__.Airplane:w</title>
<path fill="none" stroke="black" d="M182,-91.5C227.15,-91.5 239.6,-76.01 280.02,-73.77"/>
<polygon fill="black" stroke="black" points="280,-73.77 290.12,-78 285,-73.63 290,-73.5 290,-73.5 290,-73.5 285,-73.63 289.88,-69 280,-73.77 280,-73.77"/>
</g>
<!-- __main__.Flight&#45;&gt;__main__.Airport -->
<g id="edge3" class="edge">
<title>__main__.Flight:e&#45;&gt;__main__.Airport:w</title>
<path fill="none" stroke="black" d="M182,-157.5C229.26,-157.5 240.86,-174.32 285.75,-175.44"/>
<polyline fill="none" stroke="black" points="290.5,-175.5 285.5,-175.44"/>
</g>
<!-- __main__.Flight&#45;&gt;__main__.Airport -->
<g id="edge4" class="edge">
<title>__main__.Flight:e&#45;&gt;__main__.Airport:w</title>
<path fill="none" stroke="black" d="M182,-135.5C231.69,-135.5 238.68,-172.89 285.53,-175.37"/>
<polyline fill="none" stroke="black" points="290.5,-175.5 285.5,-175.37"/>
</g>
</g>
</svg>
